package test

import data.managers.UserManager
import data.managers.SessionManager
import data.repositories.MessageRepository
import domain.entities.User
import domain.entities.Message
import domain.entities.ChatSession
import domain.enums.UserStatus
import domain.enums.MessageType
import patterns.observer.EventLogger
import security.DataValidator
import security.Base64Encoder
import security.TextTransformer
import utils.generators.IdGenerator

fun main() {
    println("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´")
    println("=".repeat(50))

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    val eventLogger = EventLogger()
    val userManager = UserManager.instance
    val sessionManager = SessionManager.instance
    val messageRepository = MessageRepository(mutableListOf())
    val dataValidator = DataValidator()
    val base64Encoder = Base64Encoder()
    val textTransformer = TextTransformer()

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
    userManager.addObserver(eventLogger)
    sessionManager.addObserver(eventLogger)
    messageRepository.addObserver(eventLogger)

    // –¢–ï–°–¢ 1: –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–•
    println("\nüìã –¢–ï–°–¢ 1: –°–ò–°–¢–ï–ú–ê –í–ê–õ–ò–î–ê–¶–ò–ò –î–ê–ù–ù–´–•")
    println("-".repeat(30))

    val validUserName = "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
    val invalidUserName = "–ò"
    val validMessage = "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    val invalidMessage = ""

    println("–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ '$validUserName': ${dataValidator.validateUserName(validUserName)}")
    println("–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ '$invalidUserName': ${dataValidator.validateUserName(invalidUserName)}")
    println("–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è '$validMessage': ${dataValidator.validateMessageText(validMessage)}")
    println("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${dataValidator.validateMessageText(invalidMessage)}")

    // –¢–ï–°–¢ 2: –®–ò–§–†–û–í–ê–ù–ò–ï –ò –ö–û–î–ò–†–û–í–ê–ù–ò–ï
    println("\nüîê –¢–ï–°–¢ 2: –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    println("-".repeat(30))

    val secretMessage = "–°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 123"
    val transformed = textTransformer.transformText(secretMessage)
    val restored = textTransformer.restoreText(transformed)

    val encoded = base64Encoder.encodeToBase64(secretMessage)
    val decoded = base64Encoder.decodeFromBase64(encoded)

    println("–û—Ä–∏–≥–∏–Ω–∞–ª: $secretMessage")
    println("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ TextTransformer: $transformed")
    println("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: $restored")
    println("Base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: $encoded")
    println("Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: $decoded")
    println("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: ${secretMessage == restored && secretMessage == decoded}")

    // –¢–ï–°–¢ 3: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
    println("\nüë• –¢–ï–°–¢ 3: –°–ò–°–¢–ï–ú–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    println("-".repeat(30))

    val user1 = User("user_001", "–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤", UserStatus.ONLINE)
    val user2 = User("user_002", "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞", UserStatus.ONLINE)
    val user3 = User("user_003", "–ò–≤–∞–Ω –ö–æ–∑–ª–æ–≤", UserStatus.OFFLINE)

    userManager.addUser(user1)
    userManager.addUser(user2)
    userManager.addUser(user3)

    println("–°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userManager.users.size}")
    println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1: ${userManager.getUser("user_001")}")
    println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2: ${userManager.getUser("user_002")}")

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userManager.updateUserStatus("user_003", UserStatus.ONLINE)
    println("–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å user_003: ${userManager.getUser("user_003")?.status}")

    // –¢–ï–°–¢ 4: –°–ï–°–°–ò–ò –ß–ê–¢–ê
    println("\nüí¨ –¢–ï–°–¢ 4: –°–ò–°–¢–ï–ú–ê –°–ï–°–°–ò–ô –ß–ê–¢–ê")
    println("-".repeat(30))

    sessionManager.createSession(user1, user2)
    sessionManager.createSession(user1, user3)

    println("–°–æ–∑–¥–∞–Ω–æ —Å–µ—Å—Å–∏–π: ${sessionManager.sessions.size}")

    val firstSessionId = sessionManager.sessions.keys.first()
    val session = sessionManager.getSession(firstSessionId)
    println("–ü–µ—Ä–≤–∞—è —Å–µ—Å—Å–∏—è: $session")

    // –¢–ï–°–¢ 5: –°–û–û–ë–©–ï–ù–ò–Ø –í –ß–ê–¢–ï
    println("\nüì® –¢–ï–°–¢ 5: –°–ò–°–¢–ï–ú–ê –°–û–û–ë–©–ï–ù–ò–ô")
    println("-".repeat(30))

    val message1 = Message(
        "msg_001",
        "–ü—Ä–∏–≤–µ—Ç, –ú–∞—Ä–∏—è! –ö–∞–∫ –¥–µ–ª–∞?",
        System.currentTimeMillis(),
        user1,
        MessageType.TEXT
    )

    val message2 = Message(
        "msg_002",
        "–ü—Ä–∏–≤–µ—Ç, –ê–ª–µ–∫—Å–µ–π! –í—Å—ë —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!",
        System.currentTimeMillis() + 1000,
        user2,
        MessageType.TEXT
    )

    val systemMessage = Message(
        "msg_003",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ò–≤–∞–Ω –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É",
        System.currentTimeMillis() + 2000,
        user3,
        MessageType.SYSTEM
    )

    messageRepository.addMessage(message1)
    messageRepository.addMessage(message2)
    messageRepository.addMessage(systemMessage)

    println("–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageRepository.getAllMessages().size}")
    println("–°–æ–æ–±—â–µ–Ω–∏—è user1: ${messageRepository.getMessagesByUser("user_001").size}")
    println("–°–æ–æ–±—â–µ–Ω–∏—è user2: ${messageRepository.getMessagesByUser("user_002").size}")

    // –¢–ï–°–¢ 6: –ì–ï–ù–ï–†–ê–¶–ò–Ø ID
    println("\nüÜî –¢–ï–°–¢ 6: –°–ò–°–¢–ï–ú–ê –ì–ï–ù–ï–†–ê–¶–ò–ò ID")
    println("-".repeat(30))

    val idGenerator = IdGenerator()
    val generatedIds = (1..5).map { idGenerator.generateId() }

    println("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID:")
    generatedIds.forEachIndexed { index, id ->
        println("  ${index + 1}. $id")
    }
    println("–í—Å–µ ID —É–Ω–∏–∫–∞–ª—å–Ω—ã: ${generatedIds.toSet().size == generatedIds.size}")

    // –¢–ï–°–¢ 7: –ó–ê–ö–†–´–¢–ò–ï –°–ï–°–°–ò–ò
    println("\nüîö –¢–ï–°–¢ 7: –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–ï–°–°–ò–ò")
    println("-".repeat(30))

    sessionManager.closeSession(firstSessionId)
    val closedSession = sessionManager.getSession(firstSessionId)
    println("–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞: ${closedSession?.isActive == false}")

    // –¢–ï–°–¢ 8: –°–í–Ø–ó–¨ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ú–ï–ñ–î–£ –°–û–ë–û–ô
    println("\nüîó –¢–ï–°–¢ 8: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    println("-".repeat(30))

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    val secureText = "–°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏"
    val validated = dataValidator.validateMessageText(secureText)

    if (validated) {
        val encodedMessage = base64Encoder.encodeToBase64(secureText)
        val newMessage = Message(
            "secure_msg_001",
            encodedMessage,
            System.currentTimeMillis(),
            user1,
            MessageType.TEXT
        )
        messageRepository.addMessage(newMessage)
        println("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É")

        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
        val storedMessage = messageRepository.getAllMessages().last()
        val decodedMessage = base64Encoder.decodeFromBase64(storedMessage.text)
        println("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: $decodedMessage")
    }

    // –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    println("\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
    println("=".repeat(50))
    println("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userManager.users.size}")
    println("üí¨ –°–µ—Å—Å–∏–π —á–∞—Ç–∞: ${sessionManager.sessions.size}")
    println("üì® –°–æ–æ–±—â–µ–Ω–∏–π: ${messageRepository.getAllMessages().size}")
    println("üîê –í–∞–ª–∏–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageRepository.getAllMessages().count { dataValidator.validateMessageText(it.text) }}")
    println("üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${sessionManager.sessions.values.count { it.isActive }}")

    println("\n‚úÖ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    println("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π! üéâ")
}